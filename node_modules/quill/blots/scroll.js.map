{"version":3,"file":"scroll.js","names":["_parchment","require","_quillDelta","_interopRequireWildcard","_emitter","_interopRequireDefault","_block","_break","_container","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","isLine","blot","Block","BlockEmbed","isUpdatable","updateContent","Scroll","ScrollBlot","blotName","className","tagName","defaultChild","allowedChildren","Container","constructor","registry","domNode","_ref","emitter","batch","optimize","enable","addEventListener","handleDragStart","batchStart","Array","isArray","batchEnd","mutations","update","emitMount","emit","Emitter","events","SCROLL_BLOT_MOUNT","emitUnmount","SCROLL_BLOT_UNMOUNT","emitEmbedUpdate","change","SCROLL_EMBED_UPDATE","deleteAt","index","length","first","offset","line","last","ref","children","head","Break","moveChildren","remove","enabled","arguments","undefined","setAttribute","formatAt","format","value","insertAt","def","scroll","query","Scope","BLOCK","create","statics","appendChild","endsWith","slice","embed","insertBefore","scope","INLINE_BLOT","wrapper","insertContents","delta","renderBlocks","deltaToRenderBlocks","concat","Delta","insert","pop","shift","shouldInsertNewlineChar","type","descendant","key","insertInlineContents","newlineCharLength","lineEndIndex","formats","bubbleFormats","attributes","AttributeMap","diff","keys","forEach","name","refBlot","refBlotOffset","find","split","renderBlock","block","createBlock","blockEmbed","isEnabled","getAttribute","leaf","path","LeafBlot","lines","Number","MAX_VALUE","getLines","blotIndex","blotLength","lengthLeft","forEachAt","child","childIndex","childLength","push","ContainerBlot","context","SCROLL_OPTIMIZE","source","sources","USER","observer","takeRecords","filter","_ref2","target","SCROLL_BEFORE_UPDATE","SCROLL_UPDATE","updateEmbedAt","b","event","preventDefault","currentBlockDelta","op","splitted","text","INLINE","entries","_ref3","isBlockBlot","BLOT","_ref4","parent","inlineContents","reduce","Op","isInlineEmbed","_default","exports"],"sources":["../../src/blots/scroll.ts"],"sourcesContent":["import { ContainerBlot, LeafBlot, Scope, ScrollBlot } from 'parchment';\nimport type { Blot, Parent, EmbedBlot, ParentBlot, Registry } from 'parchment';\nimport Delta, { AttributeMap, Op } from 'quill-delta';\nimport Emitter from '../core/emitter';\nimport type { EmitterSource } from '../core/emitter';\nimport Block, { BlockEmbed } from './block';\nimport Break from './break';\nimport Container from './container';\nimport { bubbleFormats } from './block';\n\ntype RenderBlock =\n  | {\n      type: 'blockEmbed';\n      attributes: AttributeMap;\n      key: string;\n      value: unknown;\n    }\n  | { type: 'block'; attributes: AttributeMap; delta: Delta };\n\nfunction isLine(blot: unknown): blot is Block | BlockEmbed {\n  return blot instanceof Block || blot instanceof BlockEmbed;\n}\n\ninterface UpdatableEmbed {\n  updateContent(change: unknown): void;\n}\n\nfunction isUpdatable(blot: Blot): blot is Blot & UpdatableEmbed {\n  return typeof (blot as unknown as any).updateContent === 'function';\n}\n\nclass Scroll extends ScrollBlot {\n  static blotName = 'scroll';\n  static className = 'ql-editor';\n  static tagName = 'DIV';\n  static defaultChild = Block;\n  static allowedChildren = [Block, BlockEmbed, Container];\n\n  emitter: Emitter;\n  batch: false | MutationRecord[];\n\n  constructor(\n    registry: Registry,\n    domNode: HTMLDivElement,\n    { emitter }: { emitter: Emitter },\n  ) {\n    super(registry, domNode);\n    this.emitter = emitter;\n    this.batch = false;\n    this.optimize();\n    this.enable();\n    this.domNode.addEventListener('dragstart', (e) => this.handleDragStart(e));\n  }\n\n  batchStart() {\n    if (!Array.isArray(this.batch)) {\n      this.batch = [];\n    }\n  }\n\n  batchEnd() {\n    if (!this.batch) return;\n    const mutations = this.batch;\n    this.batch = false;\n    this.update(mutations);\n  }\n\n  emitMount(blot: Blot) {\n    this.emitter.emit(Emitter.events.SCROLL_BLOT_MOUNT, blot);\n  }\n\n  emitUnmount(blot: Blot) {\n    this.emitter.emit(Emitter.events.SCROLL_BLOT_UNMOUNT, blot);\n  }\n\n  emitEmbedUpdate(blot: Blot, change: unknown) {\n    this.emitter.emit(Emitter.events.SCROLL_EMBED_UPDATE, blot, change);\n  }\n\n  deleteAt(index: number, length: number) {\n    const [first, offset] = this.line(index);\n    const [last] = this.line(index + length);\n    super.deleteAt(index, length);\n    if (last != null && first !== last && offset > 0) {\n      if (first instanceof BlockEmbed || last instanceof BlockEmbed) {\n        this.optimize();\n        return;\n      }\n      const ref =\n        last.children.head instanceof Break ? null : last.children.head;\n      // @ts-expect-error\n      first.moveChildren(last, ref);\n      // @ts-expect-error\n      first.remove();\n    }\n    this.optimize();\n  }\n\n  enable(enabled = true) {\n    this.domNode.setAttribute('contenteditable', enabled ? 'true' : 'false');\n  }\n\n  formatAt(index: number, length: number, format: string, value: unknown) {\n    super.formatAt(index, length, format, value);\n    this.optimize();\n  }\n\n  insertAt(index: number, value: string, def?: unknown) {\n    if (index >= this.length()) {\n      if (def == null || this.scroll.query(value, Scope.BLOCK) == null) {\n        const blot = this.scroll.create(this.statics.defaultChild.blotName);\n        this.appendChild(blot);\n        if (def == null && value.endsWith('\\n')) {\n          blot.insertAt(0, value.slice(0, -1), def);\n        } else {\n          blot.insertAt(0, value, def);\n        }\n      } else {\n        const embed = this.scroll.create(value, def);\n        this.appendChild(embed);\n      }\n    } else {\n      super.insertAt(index, value, def);\n    }\n    this.optimize();\n  }\n\n  insertBefore(blot: Blot, ref?: Blot) {\n    if (blot.statics.scope === Scope.INLINE_BLOT) {\n      const wrapper = this.scroll.create(\n        this.statics.defaultChild.blotName,\n      ) as Parent;\n      wrapper.appendChild(blot);\n      super.insertBefore(wrapper, ref);\n    } else {\n      super.insertBefore(blot, ref);\n    }\n  }\n\n  insertContents(index: number, delta: Delta) {\n    const renderBlocks = this.deltaToRenderBlocks(\n      delta.concat(new Delta().insert('\\n')),\n    );\n    const last = renderBlocks.pop();\n    if (last == null) return;\n\n    this.batchStart();\n\n    const first = renderBlocks.shift();\n    if (first) {\n      const shouldInsertNewlineChar =\n        first.type === 'block' &&\n        (first.delta.length() === 0 ||\n          (!this.descendant(BlockEmbed, index)[0] && index < this.length()));\n      const delta =\n        first.type === 'block'\n          ? first.delta\n          : new Delta().insert({ [first.key]: first.value });\n      insertInlineContents(this, index, delta);\n      const newlineCharLength = first.type === 'block' ? 1 : 0;\n      const lineEndIndex = index + delta.length() + newlineCharLength;\n      if (shouldInsertNewlineChar) {\n        this.insertAt(lineEndIndex - 1, '\\n');\n      }\n\n      const formats = bubbleFormats(this.line(index)[0]);\n      const attributes = AttributeMap.diff(formats, first.attributes) || {};\n      Object.keys(attributes).forEach((name) => {\n        this.formatAt(lineEndIndex - 1, 1, name, attributes[name]);\n      });\n\n      index = lineEndIndex;\n    }\n\n    let [refBlot, refBlotOffset] = this.children.find(index);\n    if (renderBlocks.length) {\n      if (refBlot) {\n        refBlot = refBlot.split(refBlotOffset);\n        refBlotOffset = 0;\n      }\n\n      renderBlocks.forEach((renderBlock) => {\n        if (renderBlock.type === 'block') {\n          const block = this.createBlock(\n            renderBlock.attributes,\n            refBlot || undefined,\n          );\n          insertInlineContents(block, 0, renderBlock.delta);\n        } else {\n          const blockEmbed = this.create(\n            renderBlock.key,\n            renderBlock.value,\n          ) as EmbedBlot;\n          this.insertBefore(blockEmbed, refBlot || undefined);\n          Object.keys(renderBlock.attributes).forEach((name) => {\n            blockEmbed.format(name, renderBlock.attributes[name]);\n          });\n        }\n      });\n    }\n\n    if (last.type === 'block' && last.delta.length()) {\n      const offset = refBlot\n        ? refBlot.offset(refBlot.scroll) + refBlotOffset\n        : this.length();\n      insertInlineContents(this, offset, last.delta);\n    }\n\n    this.batchEnd();\n    this.optimize();\n  }\n\n  isEnabled() {\n    return this.domNode.getAttribute('contenteditable') === 'true';\n  }\n\n  leaf(index: number): [LeafBlot | null, number] {\n    const last = this.path(index).pop();\n    if (!last) {\n      return [null, -1];\n    }\n\n    const [blot, offset] = last;\n    return blot instanceof LeafBlot ? [blot, offset] : [null, -1];\n  }\n\n  line(index: number): [Block | BlockEmbed | null, number] {\n    if (index === this.length()) {\n      return this.line(index - 1);\n    }\n    // @ts-expect-error TODO: make descendant() generic\n    return this.descendant(isLine, index);\n  }\n\n  lines(index = 0, length = Number.MAX_VALUE): (Block | BlockEmbed)[] {\n    const getLines = (\n      blot: ParentBlot,\n      blotIndex: number,\n      blotLength: number,\n    ) => {\n      let lines: (Block | BlockEmbed)[] = [];\n      let lengthLeft = blotLength;\n      blot.children.forEachAt(\n        blotIndex,\n        blotLength,\n        (child, childIndex, childLength) => {\n          if (isLine(child)) {\n            lines.push(child);\n          } else if (child instanceof ContainerBlot) {\n            lines = lines.concat(getLines(child, childIndex, lengthLeft));\n          }\n          lengthLeft -= childLength;\n        },\n      );\n      return lines;\n    };\n    return getLines(this, index, length);\n  }\n\n  optimize(context?: { [key: string]: any }): void;\n  optimize(\n    mutations?: MutationRecord[],\n    context?: { [key: string]: any },\n  ): void;\n  optimize(mutations = [], context = {}) {\n    if (this.batch) return;\n    super.optimize(mutations, context);\n    if (mutations.length > 0) {\n      this.emitter.emit(Emitter.events.SCROLL_OPTIMIZE, mutations, context);\n    }\n  }\n\n  path(index: number) {\n    return super.path(index).slice(1); // Exclude self\n  }\n\n  remove() {\n    // Never remove self\n  }\n\n  update(source?: EmitterSource): void;\n  update(mutations?: MutationRecord[]): void;\n  update(mutations?: MutationRecord[] | EmitterSource): void {\n    if (this.batch) {\n      if (Array.isArray(mutations)) {\n        this.batch = this.batch.concat(mutations);\n      }\n      return;\n    }\n    let source: EmitterSource = Emitter.sources.USER;\n    if (typeof mutations === 'string') {\n      source = mutations;\n    }\n    if (!Array.isArray(mutations)) {\n      mutations = this.observer.takeRecords();\n    }\n    mutations = mutations.filter(({ target }) => {\n      const blot = this.find(target, true);\n      return blot && !isUpdatable(blot);\n    });\n    if (mutations.length > 0) {\n      this.emitter.emit(Emitter.events.SCROLL_BEFORE_UPDATE, source, mutations);\n    }\n    super.update(mutations.concat([])); // pass copy\n    if (mutations.length > 0) {\n      this.emitter.emit(Emitter.events.SCROLL_UPDATE, source, mutations);\n    }\n  }\n\n  updateEmbedAt(index: number, key: string, change: unknown) {\n    // Currently it only supports top-level embeds (BlockEmbed).\n    // We can update `ParentBlot` in parchment to support inline embeds.\n    const [blot] = this.descendant((b: Blot) => b instanceof BlockEmbed, index);\n    if (blot && blot.statics.blotName === key && isUpdatable(blot)) {\n      blot.updateContent(change);\n    }\n  }\n\n  protected handleDragStart(event: DragEvent) {\n    event.preventDefault();\n  }\n\n  private deltaToRenderBlocks(delta: Delta) {\n    const renderBlocks: RenderBlock[] = [];\n\n    let currentBlockDelta = new Delta();\n    delta.forEach((op) => {\n      const insert = op?.insert;\n      if (!insert) return;\n      if (typeof insert === 'string') {\n        const splitted = insert.split('\\n');\n        splitted.slice(0, -1).forEach((text) => {\n          currentBlockDelta.insert(text, op.attributes);\n          renderBlocks.push({\n            type: 'block',\n            delta: currentBlockDelta,\n            attributes: op.attributes ?? {},\n          });\n          currentBlockDelta = new Delta();\n        });\n        const last = splitted[splitted.length - 1];\n        if (last) {\n          currentBlockDelta.insert(last, op.attributes);\n        }\n      } else {\n        const key = Object.keys(insert)[0];\n        if (!key) return;\n        if (this.query(key, Scope.INLINE)) {\n          currentBlockDelta.push(op);\n        } else {\n          if (currentBlockDelta.length()) {\n            renderBlocks.push({\n              type: 'block',\n              delta: currentBlockDelta,\n              attributes: {},\n            });\n          }\n          currentBlockDelta = new Delta();\n          renderBlocks.push({\n            type: 'blockEmbed',\n            key,\n            value: insert[key],\n            attributes: op.attributes ?? {},\n          });\n        }\n      }\n    });\n\n    if (currentBlockDelta.length()) {\n      renderBlocks.push({\n        type: 'block',\n        delta: currentBlockDelta,\n        attributes: {},\n      });\n    }\n\n    return renderBlocks;\n  }\n\n  private createBlock(attributes: AttributeMap, refBlot?: Blot) {\n    let blotName: string | undefined;\n    const formats: AttributeMap = {};\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      const isBlockBlot = this.query(key, Scope.BLOCK & Scope.BLOT) != null;\n      if (isBlockBlot) {\n        blotName = key;\n      } else {\n        formats[key] = value;\n      }\n    });\n\n    const block = this.create(\n      blotName || this.statics.defaultChild.blotName,\n      blotName ? attributes[blotName] : undefined,\n    ) as ParentBlot;\n\n    this.insertBefore(block, refBlot || undefined);\n\n    const length = block.length();\n    Object.entries(formats).forEach(([key, value]) => {\n      block.formatAt(0, length, key, value);\n    });\n\n    return block;\n  }\n}\n\nfunction insertInlineContents(\n  parent: ParentBlot,\n  index: number,\n  inlineContents: Delta,\n) {\n  inlineContents.reduce((index, op) => {\n    const length = Op.length(op);\n    let attributes = op.attributes || {};\n    if (op.insert != null) {\n      if (typeof op.insert === 'string') {\n        const text = op.insert;\n        parent.insertAt(index, text);\n        const [leaf] = parent.descendant(LeafBlot, index);\n        const formats = bubbleFormats(leaf);\n        attributes = AttributeMap.diff(formats, attributes) || {};\n      } else if (typeof op.insert === 'object') {\n        const key = Object.keys(op.insert)[0]; // There should only be one key\n        if (key == null) return index;\n        parent.insertAt(index, key, op.insert[key]);\n        const isInlineEmbed = parent.scroll.query(key, Scope.INLINE) != null;\n        if (isInlineEmbed) {\n          const [leaf] = parent.descendant(LeafBlot, index);\n          const formats = bubbleFormats(leaf);\n          attributes = AttributeMap.diff(formats, attributes) || {};\n        }\n      }\n    }\n    Object.keys(attributes).forEach((key) => {\n      parent.formatAt(index, length, key, attributes[key]);\n    });\n    return index + length;\n  }, index);\n}\n\nexport interface ScrollConstructor {\n  new (\n    registry: Registry,\n    domNode: HTMLDivElement,\n    options: { emitter: Emitter },\n  ): Scroll;\n}\n\nexport default Scroll;\n"],"mappings":"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"}