{"version":3,"file":"editor.js","names":["_lodashEs","require","_parchment","_quillDelta","_interopRequireWildcard","_block","_break","_interopRequireDefault","_cursor","_text","_selection","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","ASCII","Editor","constructor","scroll","delta","getDelta","applyDelta","update","scrollLength","length","batchStart","normalizedDelta","normalizeDelta","deleteDelta","Delta","normalizedOps","splitOpLines","ops","slice","reduce","index","op","Op","attributes","isImplicitNewlinePrepended","isImplicitNewlineAppended","insert","retain","text","endsWith","descendant","BlockEmbed","insertAt","line","offset","formats","merge","bubbleFormats","Block","leaf","LeafBlot","AttributeMap","diff","key","keys","isInlineEmbed","query","Scope","INLINE","TextBlot","value","EmbedBlot","statics","scope","INLINE_BLOT","push","updateEmbedAt","forEach","name","formatAt","prependedLength","addedLength","delete","deleteAt","batchEnd","optimize","deleteText","formatLine","arguments","undefined","format","lines","Math","max","cloneDeep","formatText","getContents","concat","getFormat","leaves","path","blot","descendants","lineFormats","leafFormats","map","blots","shift","combineFormats","getHTML","lineOffset","lineLength","excludeOuterTag","convertHTML","getText","filter","join","insertContents","contents","change","insertEmbed","embed","insertText","replace","isBlank","children","head","blotName","block","Break","removeFormat","suffixLength","suffix","mutations","selectionInfo","oldDelta","type","target","data","match","find","textBlot","oldValue","CursorBlot","CONTENTS","oldText","newText","relativeSelectionInfo","oldRange","shiftRange","newRange","diffDelta","compose","isEqual","convertListHTML","items","lastIndent","types","endTag","getListType","pop","child","indent","rest","tag","attribute","previousType","html","escapeText","ParentBlot","forEachAt","childLength","list","parts","outerHTML","innerHTML","domNode","start","end","split","Element","combined","merged","combinedValue","Array","isArray","indexOf","_ref","amount","Range","_default","exports"],"sources":["../../src/core/editor.ts"],"sourcesContent":["import { cloneDeep, isEqual, merge } from 'lodash-es';\nimport { LeafBlot, EmbedBlot, Scope, ParentBlot } from 'parchment';\nimport type { Blot } from 'parchment';\nimport Delta, { AttributeMap, Op } from 'quill-delta';\nimport Block, { BlockEmbed, bubbleFormats } from '../blots/block';\nimport Break from '../blots/break';\nimport CursorBlot from '../blots/cursor';\nimport type Scroll from '../blots/scroll';\nimport TextBlot, { escapeText } from '../blots/text';\nimport { Range } from './selection';\n\nconst ASCII = /^[ -~]*$/;\n\ntype SelectionInfo = {\n  newRange: Range;\n  oldRange: Range;\n};\n\nclass Editor {\n  scroll: Scroll;\n  delta: Delta;\n\n  constructor(scroll: Scroll) {\n    this.scroll = scroll;\n    this.delta = this.getDelta();\n  }\n\n  applyDelta(delta: Delta): Delta {\n    this.scroll.update();\n    let scrollLength = this.scroll.length();\n    this.scroll.batchStart();\n    const normalizedDelta = normalizeDelta(delta);\n    const deleteDelta = new Delta();\n    const normalizedOps = splitOpLines(normalizedDelta.ops.slice());\n    normalizedOps.reduce((index, op) => {\n      const length = Op.length(op);\n      let attributes = op.attributes || {};\n      let isImplicitNewlinePrepended = false;\n      let isImplicitNewlineAppended = false;\n      if (op.insert != null) {\n        deleteDelta.retain(length);\n        if (typeof op.insert === 'string') {\n          const text = op.insert;\n          isImplicitNewlineAppended =\n            !text.endsWith('\\n') &&\n            (scrollLength <= index ||\n              !!this.scroll.descendant(BlockEmbed, index)[0]);\n          this.scroll.insertAt(index, text);\n          const [line, offset] = this.scroll.line(index);\n          let formats = merge({}, bubbleFormats(line));\n          if (line instanceof Block) {\n            const [leaf] = line.descendant(LeafBlot, offset);\n            if (leaf) {\n              formats = merge(formats, bubbleFormats(leaf));\n            }\n          }\n          attributes = AttributeMap.diff(formats, attributes) || {};\n        } else if (typeof op.insert === 'object') {\n          const key = Object.keys(op.insert)[0]; // There should only be one key\n          if (key == null) return index;\n          const isInlineEmbed = this.scroll.query(key, Scope.INLINE) != null;\n          if (isInlineEmbed) {\n            if (\n              scrollLength <= index ||\n              !!this.scroll.descendant(BlockEmbed, index)[0]\n            ) {\n              isImplicitNewlineAppended = true;\n            }\n          } else if (index > 0) {\n            const [leaf, offset] = this.scroll.descendant(LeafBlot, index - 1);\n            if (leaf instanceof TextBlot) {\n              const text = leaf.value();\n              if (text[offset] !== '\\n') {\n                isImplicitNewlinePrepended = true;\n              }\n            } else if (\n              leaf instanceof EmbedBlot &&\n              leaf.statics.scope === Scope.INLINE_BLOT\n            ) {\n              isImplicitNewlinePrepended = true;\n            }\n          }\n          this.scroll.insertAt(index, key, op.insert[key]);\n\n          if (isInlineEmbed) {\n            const [leaf] = this.scroll.descendant(LeafBlot, index);\n            if (leaf) {\n              const formats = merge({}, bubbleFormats(leaf));\n              attributes = AttributeMap.diff(formats, attributes) || {};\n            }\n          }\n        }\n        scrollLength += length;\n      } else {\n        deleteDelta.push(op);\n\n        if (op.retain !== null && typeof op.retain === 'object') {\n          const key = Object.keys(op.retain)[0];\n          if (key == null) return index;\n          this.scroll.updateEmbedAt(index, key, op.retain[key]);\n        }\n      }\n      Object.keys(attributes).forEach((name) => {\n        this.scroll.formatAt(index, length, name, attributes[name]);\n      });\n      const prependedLength = isImplicitNewlinePrepended ? 1 : 0;\n      const addedLength = isImplicitNewlineAppended ? 1 : 0;\n      scrollLength += prependedLength + addedLength;\n      deleteDelta.retain(prependedLength);\n      deleteDelta.delete(addedLength);\n      return index + length + prependedLength + addedLength;\n    }, 0);\n    deleteDelta.reduce((index, op) => {\n      if (typeof op.delete === 'number') {\n        this.scroll.deleteAt(index, op.delete);\n        return index;\n      }\n      return index + Op.length(op);\n    }, 0);\n    this.scroll.batchEnd();\n    this.scroll.optimize();\n    return this.update(normalizedDelta);\n  }\n\n  deleteText(index: number, length: number): Delta {\n    this.scroll.deleteAt(index, length);\n    return this.update(new Delta().retain(index).delete(length));\n  }\n\n  formatLine(\n    index: number,\n    length: number,\n    formats: Record<string, unknown> = {},\n  ): Delta {\n    this.scroll.update();\n    Object.keys(formats).forEach((format) => {\n      this.scroll.lines(index, Math.max(length, 1)).forEach((line) => {\n        line.format(format, formats[format]);\n      });\n    });\n    this.scroll.optimize();\n    const delta = new Delta().retain(index).retain(length, cloneDeep(formats));\n    return this.update(delta);\n  }\n\n  formatText(\n    index: number,\n    length: number,\n    formats: Record<string, unknown> = {},\n  ): Delta {\n    Object.keys(formats).forEach((format) => {\n      this.scroll.formatAt(index, length, format, formats[format]);\n    });\n    const delta = new Delta().retain(index).retain(length, cloneDeep(formats));\n    return this.update(delta);\n  }\n\n  getContents(index: number, length: number): Delta {\n    return this.delta.slice(index, index + length);\n  }\n\n  getDelta(): Delta {\n    return this.scroll.lines().reduce((delta, line) => {\n      return delta.concat(line.delta());\n    }, new Delta());\n  }\n\n  getFormat(index: number, length = 0): Record<string, unknown> {\n    let lines: (Block | BlockEmbed)[] = [];\n    let leaves: LeafBlot[] = [];\n    if (length === 0) {\n      this.scroll.path(index).forEach((path) => {\n        const [blot] = path;\n        if (blot instanceof Block) {\n          lines.push(blot);\n        } else if (blot instanceof LeafBlot) {\n          leaves.push(blot);\n        }\n      });\n    } else {\n      lines = this.scroll.lines(index, length);\n      leaves = this.scroll.descendants(LeafBlot, index, length);\n    }\n    const [lineFormats, leafFormats] = [lines, leaves].map((blots) => {\n      const blot = blots.shift();\n      if (blot == null) return {};\n      let formats = bubbleFormats(blot);\n      while (Object.keys(formats).length > 0) {\n        const blot = blots.shift();\n        if (blot == null) return formats;\n        formats = combineFormats(bubbleFormats(blot), formats);\n      }\n      return formats;\n    });\n    return { ...lineFormats, ...leafFormats };\n  }\n\n  getHTML(index: number, length: number): string {\n    const [line, lineOffset] = this.scroll.line(index);\n    if (line) {\n      const lineLength = line.length();\n      if (line.length() >= lineOffset + length) {\n        const excludeOuterTag = !(lineOffset === 0 && length === lineLength);\n        return convertHTML(line, lineOffset, length, excludeOuterTag);\n      }\n      return convertHTML(this.scroll, index, length, true);\n    }\n    return '';\n  }\n\n  getText(index: number, length: number): string {\n    return this.getContents(index, length)\n      .filter((op) => typeof op.insert === 'string')\n      .map((op) => op.insert)\n      .join('');\n  }\n\n  insertContents(index: number, contents: Delta): Delta {\n    const normalizedDelta = normalizeDelta(contents);\n    const change = new Delta().retain(index).concat(normalizedDelta);\n    this.scroll.insertContents(index, normalizedDelta);\n    return this.update(change);\n  }\n\n  insertEmbed(index: number, embed: string, value: unknown): Delta {\n    this.scroll.insertAt(index, embed, value);\n    return this.update(new Delta().retain(index).insert({ [embed]: value }));\n  }\n\n  insertText(\n    index: number,\n    text: string,\n    formats: Record<string, unknown> = {},\n  ): Delta {\n    text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n    this.scroll.insertAt(index, text);\n    Object.keys(formats).forEach((format) => {\n      this.scroll.formatAt(index, text.length, format, formats[format]);\n    });\n    return this.update(\n      new Delta().retain(index).insert(text, cloneDeep(formats)),\n    );\n  }\n\n  isBlank(): boolean {\n    if (this.scroll.children.length === 0) return true;\n    if (this.scroll.children.length > 1) return false;\n    const blot = this.scroll.children.head;\n    if (blot?.statics.blotName !== Block.blotName) return false;\n    const block = blot as Block;\n    if (block.children.length > 1) return false;\n    return block.children.head instanceof Break;\n  }\n\n  removeFormat(index: number, length: number): Delta {\n    const text = this.getText(index, length);\n    const [line, offset] = this.scroll.line(index + length);\n    let suffixLength = 0;\n    let suffix = new Delta();\n    if (line != null) {\n      suffixLength = line.length() - offset;\n      suffix = line\n        .delta()\n        .slice(offset, offset + suffixLength - 1)\n        .insert('\\n');\n    }\n    const contents = this.getContents(index, length + suffixLength);\n    const diff = contents.diff(new Delta().insert(text).concat(suffix));\n    const delta = new Delta().retain(index).concat(diff);\n    return this.applyDelta(delta);\n  }\n\n  update(\n    change: Delta | null,\n    mutations: MutationRecord[] = [],\n    selectionInfo: SelectionInfo | undefined = undefined,\n  ): Delta {\n    const oldDelta = this.delta;\n    if (\n      mutations.length === 1 &&\n      mutations[0].type === 'characterData' &&\n      // @ts-expect-error Fix me later\n      mutations[0].target.data.match(ASCII) &&\n      this.scroll.find(mutations[0].target)\n    ) {\n      // Optimization for character changes\n      const textBlot = this.scroll.find(mutations[0].target) as Blot;\n      const formats = bubbleFormats(textBlot);\n      const index = textBlot.offset(this.scroll);\n      // @ts-expect-error Fix me later\n      const oldValue = mutations[0].oldValue.replace(CursorBlot.CONTENTS, '');\n      const oldText = new Delta().insert(oldValue);\n      // @ts-expect-error\n      const newText = new Delta().insert(textBlot.value());\n      const relativeSelectionInfo = selectionInfo && {\n        oldRange: shiftRange(selectionInfo.oldRange, -index),\n        newRange: shiftRange(selectionInfo.newRange, -index),\n      };\n      const diffDelta = new Delta()\n        .retain(index)\n        .concat(oldText.diff(newText, relativeSelectionInfo));\n      change = diffDelta.reduce((delta, op) => {\n        if (op.insert) {\n          return delta.insert(op.insert, formats);\n        }\n        return delta.push(op);\n      }, new Delta());\n      this.delta = oldDelta.compose(change);\n    } else {\n      this.delta = this.getDelta();\n      if (!change || !isEqual(oldDelta.compose(change), this.delta)) {\n        change = oldDelta.diff(this.delta, selectionInfo);\n      }\n    }\n    return change;\n  }\n}\n\ninterface ListItem {\n  child: Blot;\n  offset: number;\n  length: number;\n  indent: number;\n  type: string;\n}\nfunction convertListHTML(\n  items: ListItem[],\n  lastIndent: number,\n  types: string[],\n): string {\n  if (items.length === 0) {\n    const [endTag] = getListType(types.pop());\n    if (lastIndent <= 0) {\n      return `</li></${endTag}>`;\n    }\n    return `</li></${endTag}>${convertListHTML([], lastIndent - 1, types)}`;\n  }\n  const [{ child, offset, length, indent, type }, ...rest] = items;\n  const [tag, attribute] = getListType(type);\n  if (indent > lastIndent) {\n    types.push(type);\n    if (indent === lastIndent + 1) {\n      return `<${tag}><li${attribute}>${convertHTML(\n        child,\n        offset,\n        length,\n      )}${convertListHTML(rest, indent, types)}`;\n    }\n    return `<${tag}><li>${convertListHTML(items, lastIndent + 1, types)}`;\n  }\n  const previousType = types[types.length - 1];\n  if (indent === lastIndent && type === previousType) {\n    return `</li><li${attribute}>${convertHTML(\n      child,\n      offset,\n      length,\n    )}${convertListHTML(rest, indent, types)}`;\n  }\n  const [endTag] = getListType(types.pop());\n  return `</li></${endTag}>${convertListHTML(items, lastIndent - 1, types)}`;\n}\n\nfunction convertHTML(\n  blot: Blot,\n  index: number,\n  length: number,\n  excludeOuterTag = false,\n): string {\n  if ('html' in blot && typeof blot.html === 'function') {\n    return blot.html(index, length);\n  }\n  if (blot instanceof TextBlot) {\n    return escapeText(blot.value().slice(index, index + length));\n  }\n  if (blot instanceof ParentBlot) {\n    // TODO fix API\n    if (blot.statics.blotName === 'list-container') {\n      const items: any[] = [];\n      blot.children.forEachAt(index, length, (child, offset, childLength) => {\n        const formats =\n          'formats' in child && typeof child.formats === 'function'\n            ? child.formats()\n            : {};\n        items.push({\n          child,\n          offset,\n          length: childLength,\n          indent: formats.indent || 0,\n          type: formats.list,\n        });\n      });\n      return convertListHTML(items, -1, []);\n    }\n    const parts: string[] = [];\n    blot.children.forEachAt(index, length, (child, offset, childLength) => {\n      parts.push(convertHTML(child, offset, childLength));\n    });\n    if (excludeOuterTag || blot.statics.blotName === 'list') {\n      return parts.join('');\n    }\n    const { outerHTML, innerHTML } = blot.domNode as Element;\n    const [start, end] = outerHTML.split(`>${innerHTML}<`);\n    // TODO cleanup\n    if (start === '<table') {\n      return `<table style=\"border: 1px solid #000;\">${parts.join('')}<${end}`;\n    }\n    return `${start}>${parts.join('')}<${end}`;\n  }\n  return blot.domNode instanceof Element ? blot.domNode.outerHTML : '';\n}\n\nfunction combineFormats(\n  formats: Record<string, unknown>,\n  combined: Record<string, unknown>,\n): Record<string, unknown> {\n  return Object.keys(combined).reduce(\n    (merged, name) => {\n      if (formats[name] == null) return merged;\n      const combinedValue = combined[name];\n      if (combinedValue === formats[name]) {\n        merged[name] = combinedValue;\n      } else if (Array.isArray(combinedValue)) {\n        if (combinedValue.indexOf(formats[name]) < 0) {\n          merged[name] = combinedValue.concat([formats[name]]);\n        } else {\n          // If style already exists, don't add to an array, but don't lose other styles\n          merged[name] = combinedValue;\n        }\n      } else {\n        merged[name] = [combinedValue, formats[name]];\n      }\n      return merged;\n    },\n    {} as Record<string, unknown>,\n  );\n}\n\nfunction getListType(type: string | undefined) {\n  const tag = type === 'ordered' ? 'ol' : 'ul';\n  switch (type) {\n    case 'checked':\n      return [tag, ' data-list=\"checked\"'];\n    case 'unchecked':\n      return [tag, ' data-list=\"unchecked\"'];\n    default:\n      return [tag, ''];\n  }\n}\n\nfunction normalizeDelta(delta: Delta) {\n  return delta.reduce((normalizedDelta, op) => {\n    if (typeof op.insert === 'string') {\n      const text = op.insert.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n      return normalizedDelta.insert(text, op.attributes);\n    }\n    return normalizedDelta.push(op);\n  }, new Delta());\n}\n\nfunction shiftRange({ index, length }: Range, amount: number) {\n  return new Range(index + amount, length);\n}\n\nfunction splitOpLines(ops: Op[]) {\n  const split: Op[] = [];\n  ops.forEach((op) => {\n    if (typeof op.insert === 'string') {\n      const lines = op.insert.split('\\n');\n      lines.forEach((line, index) => {\n        if (index) split.push({ insert: '\\n', attributes: op.attributes });\n        if (line) split.push({ insert: line, attributes: op.attributes });\n      });\n    } else {\n      split.push(op);\n    }\n  });\n\n  return split;\n}\n\nexport default Editor;\n"],"mappings":"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"}