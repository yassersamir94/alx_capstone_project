{"version":3,"file":"tableEmbed.js","names":["_quillDelta","_interopRequireWildcard","require","_module","_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","parseCellIdentity","identity","parts","split","Number","stringifyCellIdentity","row","column","composePosition","delta","index","newIndex","thisIter","OpIterator","ops","offset","hasNext","length","peekLength","nextType","peekType","next","exports","compactCellData","_ref","content","attributes","data","keys","compactTableData","_ref2","rows","columns","cells","reindexCellIdentities","_ref3","reindexedCells","forEach","newPosition","tableHandler","compose","b","keepNull","Delta","aCell","bCell","AttributeMap","cell","transform","priority","aDeltas","bDeltas","newIdentity","invert","change","base","changeCell","baseCell","TableEmbed","Module","register","registerEmbed","_default"],"sources":["../../src/modules/tableEmbed.ts"],"sourcesContent":["import Delta, { OpIterator } from 'quill-delta';\nimport type { Op, AttributeMap } from 'quill-delta';\nimport Module from '../core/module';\n\nexport type CellData = {\n  content?: Delta['ops'];\n  attributes?: Record<string, unknown>;\n};\n\nexport type TableRowColumnOp = Omit<Op, 'insert'> & {\n  insert?: { id: string };\n};\n\nexport interface TableData {\n  rows?: Delta['ops'];\n  columns?: Delta['ops'];\n  cells?: Record<string, CellData>;\n}\n\nconst parseCellIdentity = (identity: string) => {\n  const parts = identity.split(':');\n  return [Number(parts[0]) - 1, Number(parts[1]) - 1];\n};\n\nconst stringifyCellIdentity = (row: number, column: number) =>\n  `${row + 1}:${column + 1}`;\n\nexport const composePosition = (delta: Delta, index: number) => {\n  let newIndex = index;\n  const thisIter = new OpIterator(delta.ops);\n  let offset = 0;\n  while (thisIter.hasNext() && offset <= newIndex) {\n    const length = thisIter.peekLength();\n    const nextType = thisIter.peekType();\n    thisIter.next();\n    switch (nextType) {\n      case 'delete':\n        if (length > newIndex - offset) {\n          return null;\n        }\n        newIndex -= length;\n        break;\n      case 'insert':\n        newIndex += length;\n        offset += length;\n        break;\n      default:\n        offset += length;\n        break;\n    }\n  }\n  return newIndex;\n};\n\nconst compactCellData = ({\n  content,\n  attributes,\n}: {\n  content: Delta;\n  attributes: AttributeMap | undefined;\n}) => {\n  const data: CellData = {};\n  if (content.length() > 0) {\n    data.content = content.ops;\n  }\n  if (attributes && Object.keys(attributes).length > 0) {\n    data.attributes = attributes;\n  }\n  return Object.keys(data).length > 0 ? data : null;\n};\n\nconst compactTableData = ({\n  rows,\n  columns,\n  cells,\n}: {\n  rows: Delta;\n  columns: Delta;\n  cells: Record<string, CellData>;\n}) => {\n  const data: TableData = {};\n  if (rows.length() > 0) {\n    data.rows = rows.ops;\n  }\n\n  if (columns.length() > 0) {\n    data.columns = columns.ops;\n  }\n\n  if (Object.keys(cells).length) {\n    data.cells = cells;\n  }\n\n  return data;\n};\n\nconst reindexCellIdentities = (\n  cells: Record<string, CellData>,\n  { rows, columns }: { rows: Delta; columns: Delta },\n) => {\n  const reindexedCells: Record<string, CellData> = {};\n  Object.keys(cells).forEach((identity) => {\n    let [row, column] = parseCellIdentity(identity);\n\n    // @ts-expect-error Fix me later\n    row = composePosition(rows, row);\n    // @ts-expect-error Fix me later\n    column = composePosition(columns, column);\n\n    if (row !== null && column !== null) {\n      const newPosition = stringifyCellIdentity(row, column);\n      reindexedCells[newPosition] = cells[identity];\n    }\n  }, false);\n  return reindexedCells;\n};\n\nexport const tableHandler = {\n  compose(a: TableData, b: TableData, keepNull?: boolean) {\n    const rows = new Delta(a.rows || []).compose(new Delta(b.rows || []));\n    const columns = new Delta(a.columns || []).compose(\n      new Delta(b.columns || []),\n    );\n\n    const cells = reindexCellIdentities(a.cells || {}, {\n      rows: new Delta(b.rows || []),\n      columns: new Delta(b.columns || []),\n    });\n\n    Object.keys(b.cells || {}).forEach((identity) => {\n      const aCell = cells[identity] || {};\n      // @ts-expect-error Fix me later\n      const bCell = b.cells[identity];\n\n      const content = new Delta(aCell.content || []).compose(\n        new Delta(bCell.content || []),\n      );\n\n      const attributes = Delta.AttributeMap.compose(\n        aCell.attributes,\n        bCell.attributes,\n        keepNull,\n      );\n\n      const cell = compactCellData({ content, attributes });\n      if (cell) {\n        cells[identity] = cell;\n      } else {\n        delete cells[identity];\n      }\n    });\n\n    return compactTableData({ rows, columns, cells });\n  },\n  transform(a: TableData, b: TableData, priority: boolean) {\n    const aDeltas = {\n      rows: new Delta(a.rows || []),\n      columns: new Delta(a.columns || []),\n    };\n\n    const bDeltas = {\n      rows: new Delta(b.rows || []),\n      columns: new Delta(b.columns || []),\n    };\n\n    const rows = aDeltas.rows.transform(bDeltas.rows, priority);\n    const columns = aDeltas.columns.transform(bDeltas.columns, priority);\n\n    const cells = reindexCellIdentities(b.cells || {}, {\n      rows: bDeltas.rows.transform(aDeltas.rows, !priority),\n      columns: bDeltas.columns.transform(aDeltas.columns, !priority),\n    });\n\n    Object.keys(a.cells || {}).forEach((identity) => {\n      let [row, column] = parseCellIdentity(identity);\n      // @ts-expect-error Fix me later\n      row = composePosition(rows, row);\n      // @ts-expect-error Fix me later\n      column = composePosition(columns, column);\n\n      if (row !== null && column !== null) {\n        const newIdentity = stringifyCellIdentity(row, column);\n\n        // @ts-expect-error Fix me later\n        const aCell = a.cells[identity];\n        const bCell = cells[newIdentity];\n        if (bCell) {\n          const content = new Delta(aCell.content || []).transform(\n            new Delta(bCell.content || []),\n            priority,\n          );\n\n          const attributes = Delta.AttributeMap.transform(\n            aCell.attributes,\n            bCell.attributes,\n            priority,\n          );\n\n          const cell = compactCellData({ content, attributes });\n          if (cell) {\n            cells[newIdentity] = cell;\n          } else {\n            delete cells[newIdentity];\n          }\n        }\n      }\n    });\n\n    return compactTableData({ rows, columns, cells });\n  },\n  invert(change: TableData, base: TableData) {\n    const rows = new Delta(change.rows || []).invert(\n      new Delta(base.rows || []),\n    );\n    const columns = new Delta(change.columns || []).invert(\n      new Delta(base.columns || []),\n    );\n    const cells = reindexCellIdentities(change.cells || {}, {\n      rows,\n      columns,\n    });\n    Object.keys(cells).forEach((identity) => {\n      const changeCell = cells[identity] || {};\n      const baseCell = (base.cells || {})[identity] || {};\n      const content = new Delta(changeCell.content || []).invert(\n        new Delta(baseCell.content || []),\n      );\n      const attributes = Delta.AttributeMap.invert(\n        changeCell.attributes,\n        baseCell.attributes,\n      );\n      const cell = compactCellData({ content, attributes });\n      if (cell) {\n        cells[identity] = cell;\n      } else {\n        delete cells[identity];\n      }\n    });\n\n    // Cells may be removed when their row or column is removed\n    // by row/column deltas. We should add them back.\n    Object.keys(base.cells || {}).forEach((identity) => {\n      const [row, column] = parseCellIdentity(identity);\n      if (\n        composePosition(new Delta(change.rows || []), row) === null ||\n        composePosition(new Delta(change.columns || []), column) === null\n      ) {\n        // @ts-expect-error Fix me later\n        cells[identity] = base.cells[identity];\n      }\n    });\n\n    return compactTableData({ rows, columns, cells });\n  },\n};\n\nclass TableEmbed extends Module {\n  static register() {\n    Delta.registerEmbed('table-embed', tableHandler);\n  }\n}\n\nexport default TableEmbed;\n"],"mappings":"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"}